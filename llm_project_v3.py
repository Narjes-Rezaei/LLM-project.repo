# -*- coding: utf-8 -*-
"""LLM-project-v3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iZNzcu8Ei6UHPkZCEH7qRvl9eNmwyICn
"""

!git clone https://github.com/Narjes-Rezaei/LLM-project.repo.git

!pip uninstall -y transformers tokenizers sentence-transformers
!pip cache purge

!pip install transformers==4.28.1 tokenizers==0.13.3 sentence-transformers==2.2.2

import os
os.kill(os.getpid(), 9)

!pip install -U datasets evaluate

from transformers import AutoTokenizer, AutoModelForQuestionAnswering
from datasets import load_dataset

model_checkpoint = "deepset/roberta-base-squad2"
tokenizer = AutoTokenizer.from_pretrained(model_checkpoint)
model = AutoModelForQuestionAnswering.from_pretrained(model_checkpoint)

dataset = load_dataset("squad")

def preprocess_function(examples):
    # توکنایز سوال و متن
    tokenized_examples = tokenizer(
        examples["question"],
        examples["context"],
        truncation=True,
        padding="max_length",
        max_length=384,
        return_offsets_mapping=True,
    )

    start_positions = []
    end_positions = []

    for i, offsets in enumerate(tokenized_examples["offset_mapping"]):
        input_ids = tokenized_examples["input_ids"][i]
        cls_index = input_ids.index(tokenizer.cls_token_id)  # ایندکس CLS (برای حالت no answer)

        # متن سوال و جواب اصلی
        answer = examples["answers"][i]

        # اگر جواب وجود نداره (مثلاً در squad_v2)
        if len(answer["answer_start"]) == 0:
            start_positions.append(cls_index)
            end_positions.append(cls_index)
        else:
            start_char = answer["answer_start"][0]
            end_char = start_char + len(answer["text"][0])

            # پیدا کردن توکن‌های شروع و پایان جواب
            token_start_index = 0
            token_end_index = 0

            # پیدا کردن اولین توکنی که جواب در آن شروع می‌شود
            while token_start_index < len(offsets) and offsets[token_start_index][0] <= start_char:
                token_start_index += 1
            token_start_index -= 1

            # پیدا کردن اولین توکنی که جواب در آن تمام می‌شود
            while token_end_index < len(offsets) and offsets[token_end_index][1] < end_char:
                token_end_index += 1
            token_end_index = token_end_index if token_end_index < len(offsets) else len(offsets) - 1

            start_positions.append(token_start_index)
            end_positions.append(token_end_index)

    tokenized_examples["start_positions"] = start_positions
    tokenized_examples["end_positions"] = end_positions

    # دیگر نیازی به offset_mapping نیست
    tokenized_examples.pop("offset_mapping")

    return tokenized_examples

tokenized_datasets = dataset.map(preprocess_function, batched=True, remove_columns=dataset["train"].column_names)

from transformers import TrainingArguments

training_args = TrainingArguments(
    output_dir="./results",
    overwrite_output_dir=True,
    evaluation_strategy="epoch",
    save_strategy="epoch",
    learning_rate=3e-5,
    per_device_train_batch_size=8,
    per_device_eval_batch_size=8,
    num_train_epochs=2,
    weight_decay=0.01,
    logging_dir="./logs",
    load_best_model_at_end=True,
    report_to=[]
)

from transformers import Trainer

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=tokenized_datasets["train"],
    eval_dataset=tokenized_datasets["validation"],
    tokenizer=tokenizer,
)

trainer.train()

import os
os.makedirs("project_code", exist_ok=True)
model.save_pretrained("project_code/model")
tokenizer.save_pretrained("project_code/model")

from transformers import pipeline

qa = pipeline("question-answering", model="project_code/model", tokenizer="project_code/model")

context = "Google Colab is a free Jupyter notebook environment that runs in the cloud."
question = "What is Google Colab?"

result = qa(question=question, context=context)
print(result["answer"])